function varargout = GuiforIntensity2(varargin)
% GUIFORINTENSITY2 MATLAB code for GuiforIntensity2.fig
%      GUIFORINTENSITY2, by itself, creates a new GUIFORINTENSITY2 or raises the existing
%      singleton*.
%
%      H = GUIFORINTENSITY2 returns the handle to a new GUIFORINTENSITY2 or the handle to
%      the existing singleton*.
%
%      GUIFORINTENSITY2('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in GUIFORINTENSITY2.M with the given input arguments.
%
%      GUIFORINTENSITY2('Property','Value',...) creates a new GUIFORINTENSITY2 or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before GuiforIntensity2_OpeningFcn gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to GuiforIntensity2_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES

% Edit the above text to modify the response to help GuiforIntensity2

% Last Modified by GUIDE v2.5 25-Jun-2018 15:57:25

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @GuiforIntensity2_OpeningFcn, ...
                   'gui_OutputFcn',  @GuiforIntensity2_OutputFcn, ...
                   'gui_LayoutFcn',  [] , ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT


% --- Executes just before GuiforIntensity2 is made visible.
function GuiforIntensity2_OpeningFcn(hObject, eventdata, handles, varargin)
% This function has no output args, see OutputFcn.
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   command line arguments to GuiforIntensity2 (see VARARGIN)

% Choose default command line output for GuiforIntensity2
handles.output = hObject;
% handles.skip = 0;
% handles.freqpol =0;
% handles.freqcam = 0;
% handles.totalframes =0;
% handles.bright =0;
% Update handles structure
guidata(hObject, handles);

% UIWAIT makes GuiforIntensity2 wait for user response (see UIRESUME)
% uiwait(handles.figure1);


% --- Outputs from this function are returned to the command line.
function varargout = GuiforIntensity2_OutputFcn(hObject, eventdata, handles) 
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Get default command line output from handles structure
varargout{1} = handles.output;


% --- Executes on selection change in listbox2.
function listbox2_Callback(hObject, eventdata, handles)
% hObject    handle to listbox2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = cellstr(get(hObject,'String')) returns listbox2 contents as cell array
%        contents{get(hObject,'Value')} returns selected item from listbox2


% --- Executes during object creation, after setting all properties.
function listbox2_CreateFcn(hObject, eventdata, handles)
% hObject    handle to listbox2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: listbox controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function Skip_Callback(hObject, eventdata, handles)

% hObject    handle to Skip (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of Skip as text
%        str2double(get(hObject,'String')) returns contents of Skip as a double
handles.skip = str2double(get(hObject,'String'));
guidata(hObject, handles);



% --- Executes during object creation, after setting all properties.
function Skip_CreateFcn(hObject, eventdata, handles)
% hObject    handle to Skip (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function PolarizationFrequency_Callback(hObject, eventdata, handles)
% hObject    handle to PolarizationFrequency (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of PolarizationFrequency as text
%        str2double(get(hObject,'String')) returns contents of PolarizationFrequency as a double
handles.freqpol = str2double(get(hObject,'String'));
guidata(hObject, handles);
% --- Executes during object creation, after setting all properties.





function PolarizationFrequency_CreateFcn(hObject, eventdata, handles)
% hObject    handle to PolarizationFrequency (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end
% --- Executes during object creation, after setting all properties.



function CameraFrequency_Callback(hObject, eventdata, handles)
% hObject    handle to CameraFrequency (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of CameraFrequency as text
%        str2double(get(hObject,'String')) returns contents of CameraFrequency as a double
handles.camfreq = str2double(get(hObject,'String'));
guidata(hObject, handles);

% --- Executes during object creation, after setting all properties.
function CameraFrequency_CreateFcn(hObject, eventdata, handles)
% hObject    handle to CameraFrequency (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function FramesinAq_Callback(hObject, eventdata, handles)
% hObject    handle to FramesinAq (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of FramesinAq as text
%        str2double(get(hObject,'String')) returns contents of FramesinAq as a double
handles.framest = str2double(get(hObject,'String'));
guidata(hObject, handles);

% --- Executes during object creation, after setting all properties.
function FramesinAq_CreateFcn(hObject, eventdata, handles)

% hObject    handle to FramesinAq (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on button press in pushbutton2.
function pushbutton2_Callback(hObject, eventdata, handles)
%%Plotting the Intensities of Polarization Tests
guidata(hObject, handles);
[name,path] = uigetfile('*.*');
M = importdata([path,name],' ',1);
data = M.data;
skip = handles.skip;
freqpol = handles.freqpol;
freqcam =handles.camfreq;
totalframes = handles.framest;
radio = handles.radio;
disp(radio);
bright = radio;

% USE THIS: 'U:\Documents\2 Summer 2018\2_1_MMStack_Pos0_ome.txt'

% data(x,y,t(frame),i)
%%
% find min and max points in the x and y directions

xmax = max(data(:,1));
ymax = max(data(:,2));
xmin = min(data(:,1));
ymin = min(data(:,2));
pixel = 10;                          %can change
sizex = round((xmax - xmin)/pixel);  %range per pixel
sizey = round((ymax - ymin)/pixel);
z = zeros(sizex, sizey);
w = zeros(sizex, sizey);
x = 1:sizex; % xmin:xmax;
i = 1;   % i = 0;
j = ymin;
y = ones(1, sizex); %*j;
k = 0;   % k = 0;
m = 1;   % m = 0;


for i = 1:(sizey - 1)  % i < (sizey - 2)
    arrayxtemp = 1:sizex; %xmin:xmax;
    x = horzcat(x,arrayxtemp);
    %i = i+1;
end
      %Problem with x and y lengths here!!!
      %Probably should not change x length in for loop above
      
for j = 1:(sizey-1) %ymax  % j < ymax
    %j = j+1;
    ytemp = ones(1, sizex)*(j+1); %*j;
    y = horzcat(y, ytemp);
end

offset = 1.5; % change when calibrated to scale brighter polarization
totalt = totalframes/freqcam;
numberofpol = 2*totalt*freqpol;
frameperpol = totalframes/(numberofpol);
disp(numberofpol);
disp(frameperpol);
                                 %%datapts = round(length(data)/flip); %data points per polar segment
currpt = skip - 1;
evenpol = numberofpol-rem(numberofpol,2);
disp(frameperpol)
while k < evenpol -1 %%number of points and/or num of voltage flipflops
    k = k + 1;
    m = 0;
    while data(currpt,3) < frameperpol*k - 1  %% for m = 1:datapts %m = 1:frames %% number of points in polarization
      m = m + 1;
      currpt = currpt+1;
      if m == 1 || m == frameperpol
          continue
      end

    intensity = data(currpt,4);   %% from file
    pointx = data(currpt,1);      %% from file
    pointy = data(currpt,2);      %% from file
    xbin = round(pointx-xmin, -1)/10;   %% round points to bin size
    ybin = round(pointy-ymin, -1)/10;
    if xbin==0
        xbin=1;
    end
    if ybin ==0
        ybin =1;
    end
    newarray = zeros(sizex, sizey); 

        
        if rem(m, 2) == 0
                %% add intensiy to bin 1
                if bright == 1
                    intensity = intensity/offset;
                end
                newarray(xbin, ybin) = intensity;
                z = z + newarray;
        else
                %% add intensity to bin 2
                if bright == 0
                    intensity = intensity/offset;
                end          
                newarray(xbin, ybin) = intensity;
                w = w + newarray;
        end
        
%         if datapts*k+m==length(data)
%         break
%         end  
       
    end
    
%     if datapts*k+m==length(data)
%         break
%     end
end

intensityarray = (w + z);

intensityarray = reshape(intensityarray,[1,(sizex*sizey)]);
%scatter(x,y,intensityarray,colorarray)
maxi = max(intensityarray);
scalei = maxi / 500;
sizei = intensityarray / scalei;
p = 1;
q = 1;
c1 =0;
c2 =0;

colorarray = zeros(1,3,sizex, sizey);
for p = 1:sizex  % p < xmax
    for q = 1:sizey  % q < ymax
    
    maxc = max(w(p,q), z(p,q));
    scalec = maxc/1;
    if w(p,q) == 0
       c1 = 0;
    else
       c1 = w(p,q)/scalec;
    end
   
    if z(p,q) == 0
       c2 = 0;
    else
       c2 = z(p,q)/scalec;
    end
       

    colorarray2(p,q,:,:) = [c1 , c2, 0 ];

    
    end
end
recolorarray = reshape(colorarray,[(sizex*sizey),3]);
recolorarray2 = reshape(colorarray2,[(sizex*sizey),3]);
sizei=sizei+.001;
figure(1);
ax = gca;
scatter(x,y,sizei,recolorarray2, 'filled')
ax.YDir = 'reverse';

newcolor = reshape(recolorarray2, sizex, sizey, 3);
shadei = sizei/500;
shadeiarray = [ shadei; shadei; shadei];
shadeiarray = transpose(shadeiarray);
shadedcolor = shadeiarray.*recolorarray2;
shadedcolor = reshape(shadedcolor, sizex, sizey, 3);

red = zeros(1,10,3);
redyellow = zeros(1,10,3);
yellow = zeros(1,10,3);
greenyellow = zeros(1,10,3);
green = zeros(1,10,3);
for c3 = 1:10;
   red(:,c3,:) = ([1, 0, 0]/10)*(11-c3);
   redyellow(:,c3,:) = ([1, .5, 0]/10)*(11-c3);
   yellow(:,c3,:) = ([1,1, 0]/10)*(11-c3);
   greenyellow(:,c3,:) = ([.5, 1, 0]/10)*(11-c3);
   green(:,c3,:) = ([0, 1, 0]/10)*(11-c3);
end


csi =[red; redyellow; yellow; greenyellow; green];
csi = rot90(csi, -1)
figure(2);
newcolor = rot90(newcolor);
newcolor = flipud(newcolor);
shadedcolor = rot90(shadedcolor);
shadedcolor = flipud(shadedcolor);

imagesc(shadedcolor);
imagesc(csi);

% hObject    handle to pushbutton2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% --- Executes on button press in radiobutton1.
function radiobutton1_Callback(hObject, eventdata, handles)
% hObject    handle to radiobutton1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of radiobutton1
handles.radio = get(hObject,'Value');
guidata(hObject, handles);
